
plugins {
    id 'nf-live-tracking@2.0.0'
}


live {
    enabled = true
    file = "/bscratch/vishnu/COMPACT/TB_TEST_RUN/JSON_EVENTS/PROGRESS"
    overwrite = true
    interval = 5  // Interval in seconds for JSON dumps

}



params {

//Observation INFO
project = "COMPACT"
pipeline_name = "ACCEL_SEARCH"
telescope = "MeerKAT"
target = "J0514-4002A"
search_only = true

filtool {
    rfi_filter = "kadaneF 8 4 zdot"
    zap_string = ""
    //(Any additional flags eg -scloffs)
    extra_args = "-z zap 552.0 553.0 -z zap 926.0 927.0 -z zap 934.0 952.0 -z zap 1036.0 1037.0 -z zap 1062.0 1063.0 -z zap 1079.0 1080.0"
    telescope = "meerkat"
    filplan = ""
    time_decimation_factor = 1
    freq_decimation_factor = 1
    nbits = 8
    mean = 128
    std = 6
    threads = 15
    get_metadata = "${baseDir}/scripts/get_metadata.py"
    local_write = 0
    /*
    * When `local_write = 1`, the pipeline follows traditional Nextflow behavior:
    *   - If `scratch = false`, output is written to the work directory 
    *     and optionally copied to the publish directory.
    *   - If `scratch = true`, output is first written to the node’s `$tmpfs`, 
    *     then moved to the work directory, and optionally copied to the 
    *     publish directory if requested.
    * When `local_write = 0`, the output filterbank is written directly 
    * to the publish directory, and a symbolic link is stored inside 
    * Nextflow’s work directory to maintain resumability. Use this in Contra
    *
    */

}

// Define a list of configurations as a JSON string, each one corresponding to a peasoup run.
// A user can have one, or many. If only one is desired, provide a single map.
//cfg_name is output directory structure for publishing XML files
peasoup = '''
    [
    { "cfg_name"    : "full/ck00/1DW/tb",
        "fft_size": "67108864",
        "start_sample": "0",
        "nsamples": null,
        "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "min_snr": "8.0",
        "ram_limit_gb": "45.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "1250",
        "keplerian_template_bank": "/b/u/vishnu/SOFTWARE/template_bank_generator/generated_template_banks/two_hr_sample_template_bank_peasoup_format.txt",
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
    },
    { "cfg_name"    : "60m/ck00/1DW/tb",
        "fft_size": "33554432",
        "start_sample": "0",
        "nsamples": null,
        "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "min_snr": "8.0",
        "ram_limit_gb": "45.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "1250",
        "keplerian_template_bank": "/b/u/vishnu/SOFTWARE/template_bank_generator/generated_template_banks/one_hr_sample_template_bank_peasoup_format.txt",
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
    },
    { "cfg_name"    : "30m/ck02/1DW/tb",
        "fft_size": "16777216",
        "start_sample": "33554432",
        "nsamples": null,
        "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "min_snr": "8.0",
        "ram_limit_gb": "45.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "1250",
        "keplerian_template_bank": "/b/u/vishnu/SOFTWARE/template_bank_generator/generated_template_banks/half_hr_sample_template_bank_peasoup_format.txt",
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
    },
    { "cfg_name"    : "15m/ck06/1DW/tb",
        "fft_size": "8388608",
        "start_sample": "50331648",
        "nsamples": null,
        "min_freq": "0.1",
        "max_freq": "1100.0",
        "dm_pulse_width": "64",
        "min_snr": "8.0",
        "ram_limit_gb": "45.0",
        "nh": "5",
        "ngpus": "1",
        "total_cands": "1250",
        "keplerian_template_bank": "/b/u/vishnu/SOFTWARE/template_bank_generator/generated_template_banks/quarter_hr_sample_template_bank_peasoup_format.txt",
        "birdie_list": null,
        "chan_mask": null,
        "extra_args": null
    }
    ]
    '''
/* 
 * Dispersion Plan Definition (`dd_plan`)
 * 
 * FORMAT:
 * <coherent_dm>:<start_incoherent_dm>:<end_incoherent_dm>:<dm_step>:<tscrunch>
 *
 * Fields:
 * - coherent_dm        : Coherent dispersion measure used during recording.
 * - start_incoherent_dm: Starting DM to perform dedispersion.
 * - end_incoherent_dm  : Ending DM to perform dedispersion.
 * - dm_step            : Step size of DM trials.
 * - tscrunch           : Time-scrunching factor (averaging over time).
 *
: * The pipeline selects rows based on the `coherent_dm` and `subband_dm` values in your filterbank csv file:
 * - If only `coherent_dm` is given, rows with the matching `coherent_dm` will be selected.
 * - If both `coherent_dm` and `subband_dm` are given, `subband_dm` will be used to match rows.
 * - If no values are given, rows starting with `coherent_dm = 0` will run in parallel.
 */

// Dispersion Plan
dd_plan = [
    "52.0:52.00:52.10:0.03:1"
]

/*
    The two flags {nbins_low} and {nbins_high} in PulsarX below correspond to:
        "-b {nbins_low} --nbinplan 0.01 {nbins_high}"

    - 'nbins_low' is passed with '-b' and sets the default number of profile bins used by PulsarX.
    - If the spin period is greater than 0.01 s, then PulsarX uses 'nbins_high' instead.

    If you want more control over how spin periods map to profile bin numbers,
    you can define a custom nbin plan using 'custom_nbin_plan'. This will over-ride all other settings.

    Example:
        custom_nbin_plan = "-b 32 --nbinplan 0.005 64 0.01 128 1.0 256"

    This means:
        - Use 32 bins by default.
        - Use 64 bins if spin period > 0.005 s.
        - Use 128 bins if spin period > 0.01 s.
        - Use 256 bins if spin period > 1.0 s.
 */

pulsarx{
    nbins_high = 64 //Upper limit of profile bins for slow pulsars (p > 10 ms)
    nbins_low = 32  //Lower limit of profile bins for rest (p < 10 ms)
    //custom_nbin_plan = "-b 32 --nbinplan 0.005 64 0.01 128 1.0 256"
    custom_nbin_plan = null
    folding_algorithm = "render" //options are presto, dspsr or render
    nsubband = 64
    subint_length = null //Default value. Tobs/64
    template_file = "${baseDir}/include/fold_templates/meerkat_fold_UHF.template"
    clfd_q_value = 2.0
    rfi_filter = ""
    threads = 15
    extra_args = null
    //avoid_folding_file = "${baseDir}/scripts/avoid_spin_period_list.csv"
    avoid_folding_file = null

}

candidate_filter {

    candy_picker {
        enable = 0
        period_tolerance = 1e-8
        dm_tolerance = 100.0
    }

    ml_candidate_scoring {
        enable = 1
        models_dir = "${baseDir}/include/ml_models"
        pics_script = "${baseDir}/scripts/pics_classifier_multiple_models.py"
    }

    calculate_post_folding_heuristics {
        enable = 1
        alpha_snr_threshold = 0.0
        script = "${baseDir}/scripts/calculate_alpha_beta_gamma_dmffdot.py"
        //-> Currently supports alpha, beta, gamma and delta.
    }
    
}
/*

If you would like to fold only certain candidates from the peasoup XML file based on any XML keys (eg: period, dm, acc, pb),
use folding.configuration option.
1. Give it a unique name.
2. You can use any number of filter blocks. Each block can have any number of parameters.
3. The keys(snr, period) should match XML entries and each value should have a min. and max.
4. Candidates are selected based on intersection within a block and union across blocks.

Example: 
configuration = [
        UNIQUE_NAME: [
            [
                // Filter Block 1: Fold everything above S/N > 9, max limit 2500 candidates per XML
                snr: [min: 9, max: 10000.0],         // FFT signal-to-noise ratio
                total_cands_limit: 2500                   // max candidates to process in this set
            ],
            [
                // Filter Block 2: Fold candidates between S/N 8 and 9, if period > 5ms
                period: [min: 0.002, max: 10.0], // in seconds
                snr: [min: 6, max: 9.0],         // FFT signal-to-noise ratio
                total_cands_limit: 2500                   // max candidates to process in this set
            ]
            
        ]
    ]
*/
folding {
    script = "${baseDir}/scripts/fold_peasoup_candidates.py"
    // Each key is a group name (e.g., "first_run") and the value is a list of configuration dictionaries.
    configuration = [
        tb1: [
            [                
                snr: [min: 8.5, max: 10000.0],         // FFT signal-to-noise ratio
                total_cands_limit: 2500                   // max candidates to process in this set
            ]
            
        ]
    ]

}
   
kafka {
    save_search_candidate_uuid = "${baseDir}/scripts/generate_uuid_search_candidate.py"
    merged_fold_search = "${baseDir}/scripts/merge_fold_candidates_for_kafka.py"
}



}

profiles {
   local {
    includeConfig 'configs/local.config'   
 }
   hercules {
    includeConfig 'configs/hercules.config'
  }
  ozstar {
    includeConfig 'configs/ozstar.config'
  }
  ngarrgu {
    includeConfig 'configs/ngarrgu.config'
  }
  contra {
    includeConfig 'configs/contra.config'
  }

}



